# -*- coding: utf-8 -*-
"""entregable2_camposelectricos.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YdYL-L5dtp-ElLWE0cTb1fy8nvkRIZEa
"""

import numpy as np
import matplotlib.pyplot as plt
plt.style.use('ggplot')
import math

#Constante K
eps_0 = 8.8542*np.exp(-12)
k_e = 1/(4*np.pi*eps_0)

#Parametros del Grid
N = 30
grid_min = -15
grid_max = 15

#Grids
x = np.linspace(grid_min,grid_max,N)
y = np.linspace(grid_min,grid_max,N)

#Matrices
X,Y = np.meshgrid(x,y)

#Matrices vacías
EX1 = np.empty([30,30])
EY1 = np.empty([30,30])

EX2 = np.empty([30,30])
EY2 = np.empty([30,30])

#Carga (es importante definir cargas desde el principio)
q1 = 20*np.exp(-6)

#Numero de cargas
num_spots1  = 100

#Barra de cargas
q1loc_x_range = np.linspace(-6,6,num_spots1)

#Posición fija en y de la barra
q1loc_y = -3

q2 = -20*np.exp(-6)
num_spots2  = 100
q2loc_x_range = np.linspace(-5,5,num_spots2)
q2loc_y = 3

#Función para campos
def getField(x,y,q,k_e):
    #Angulos
    angle = np.angle(x+(y*(1j)))

    #Radio
    r = np.sqrt((x**2)+(y**2))

    #Componentes en ambos ejes
    Ex = k_e*(q/(r**2))*np.cos(angle)
    Ey = k_e*(q/(r**2))*np.sin(angle)
    
    return Ex, Ey

#Matriz de vectores 1
for i,q1loc_x in enumerate(q1loc_x_range):
    
    x1 = X-q1loc_x_range[i]
    y1 = Y-q1loc_y
    
    Ex1, Ey1 = getField(x1,y1,q1,k_e)
    
    #Se rellenan las matrices vacías, acumulándose
    EX1 = EX1 + Ex1
    EY1 = EY1 + Ey1
    
#Matriz de vectores 2
for i,q2loc_x in enumerate(q2loc_x_range):
    
    x2 = X-q2loc_x_range[i]
    y2 = Y-q2loc_y
    
    Ex2, Ey2 = getField(x2,y2,q2,k_e)
    
    EX2 = EX2 + Ex2
    EY2 = EY2 + Ey2
    
Ext = EX1 + EX2
Eyt = EY1 + EY2
    
#Magnitud de los componetes usando pitagoras
mags = np.sqrt((Ext**2)+(Eyt**2))

#Componentes Unitarios (compenentes en cada / magnitud), esto nos permitirá que todas las felchas sean iguales
Ext_unit = Ext/mags
Eyt_unit = Eyt/mags

# Creamos una figura y eje con plt.subplots()
fig, ax = plt.subplots(figsize = (7,7))

# Agregamos al eje las flechas de los vectores con plt.quiver()
ax.quiver((X),(Y),Ext_unit,Eyt_unit)
#ax.quiver(X,Y,Ext,Eyt)

# Dibujamos la carga puntual usando plt.scatter()
for i in range(num_spots1):
    ax.scatter(q1loc_x_range[i],q1loc_y,c = 'red',s = 100)
    
for i in range(num_spots2):
    ax.scatter(q2loc_x_range[i],q2loc_y,c = 'blue',s = 100)

#Configuramos las dimensiones del eje y el aspecto
ax.axis([grid_min,grid_max,grid_min,grid_max])
ax.set_aspect('equal','box')